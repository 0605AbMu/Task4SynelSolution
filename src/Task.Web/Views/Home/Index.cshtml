@using Task.App.Entities;
@using Task.App.ViewModel;
@using Task.Service.Metadata;
@model HomeViewModel;

@{
    Layout = "_Layout";
    ViewData["title"] = "Task | Employees";
}
<style>
        .material-symbols-outlined
        {
           vertical-align: bottom;
           /*font-size: 18px !important;*/
        }
        .tableRow{
            cursor: pointer;
        }
        .tableRow:active{
        box-shadow: 0 0 5px #0d6efd;
        }
        .table{
           display: block !important;
           overflow-x: auto !important;
           width: 100% !important;
         }
    </style>
<div class="container-lg mt-1">

    <form action="/" method="post" enctype="multipart/form-data" class="mb-3">
        <label for="formFile" class="form-label">Upload CSV(.csv) dataset file</label>
        <div class="input-group">
            <input class="form-control" type="file" id="formFile" name="file" accept="text/csv" required/>
            <button class="input-group-text d-inline-block btn btn-primary">
                <span class="material-symbols-outlined w-25">
                    file_upload
                </span>
                Upload
            </button>
        </div>
    </form>

    @if (ViewData["Error"] is not  null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @ViewData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (ViewData["Message"] is not null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @ViewData["Message"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-hover" style="width: 150% !important;">
            <thead id="tableHead" class="table-light border-2 border-primary ">
            <tr>
                <th class="position-sticky fixed-top" scope="col"> # </th>
                @for (int i = 1; i < Model.Columns.Count; i++)
                {
                    <th scope="col" style="min-width: 100px; width: min-content">
                        <div class="input-group input-group-sm">
                            <span class="input-group-text">@Model.Columns[i]</span>
                            @if (Model.Sorting?.Asc?.Contains(Model.Columns[i]) ?? false)
                            {
                                <button class="btn btn-primary" type="button" onclick="Sort('@Model.Columns[i]')" data-bs-toggle="sort">
                                    <i class="bi bi-sort-up"></i>
                                </button>
                            }
                            else if (Model.Sorting?.Desc?.Contains(Model.Columns[i]) ?? false)
                            {
                                <button type="button" class="btn btn-primary" onclick="Sort('@Model.Columns[i]')" data-bs-toggle="sort">
                                    <i class="bi bi-sort-down"></i>
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-primary" onclick="Sort('@Model.Columns[i]')" data-bs-toggle="sort">
                                </button>
                            }
                        </div>
                    </th>
                }
                <th scope="col" class="position-sticky fixed-top">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text">
                            Actions
                        </span>
                        <button type="button" class="btn btn-primary disabled">
                        </button>
                    </div>
                </th>
            </tr>
            </thead>

            @if (Model.Data is not null && Model.Data.Count != 0)
            {
                <tbody>
                @foreach ((Employee employee, int index) in Model.Data.Select((employee, i) => new ValueTuple<Employee, int>(employee, i)))
                {
                    <tr class="tableRow">
                        <td class="position-sticky fixed-top shadow-none" style="background-color: #f1f1f1">@(index + 1)</td>
                        <td>@employee.Payroll</td>
                        <td>@employee.Forename</td>
                        <td>@employee.Surname</td>
                        <td>@employee.DateOfBirth</td>
                        <td>@employee.Telephone</td>
                        <td>@employee.Mobile</td>
                        <td>@employee.Address</td>
                        <td>@employee.Address2</td>
                        <td>@employee.PostCode</td>
                        <td>@employee.Email</td>
                        <td>@employee.StartDate</td>
                        <td class="position-sticky fixed-top shadow-none" style="background-color: #f1f1f1">
                            <div class="btn-group">
                            <a class="btn btn-primary" onclick="window.location=`/edit/@employee.Id/?next=${window.location}`">
                                <span class="material-symbols-outlined">edit</span>
                            </a>
                                <button class="btn btn-danger" onclick="DeleteEmployeeById('@employee.Id')">
                                    <span class="material-symbols-outlined">delete</span>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            }
            else if (Model.Data is null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    Failure to retrieve employees
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        </table>
    </div>
    <caption class="align-content-end">All retrieved data count @(Model.Pagination?.CountOfAll ?? 0)</caption>
    <div class="float-end">
        <ul class="pagination">
            <li class="page-item">
                <button class="page-link @(Model.Pagination.HasPrevious ? "" : "disabled")" type="button" onclick="Paging('previous')">
                    Previous
                </button>
            </li>
            @for (int i = 1; i <= Model.Pagination?.NumberOfPages; i++)
            {
                <li class="page-item">
                    <button type="button" onclick="Paging(@i)" class="page-link @(i == Model.Pagination.Current ? "active" : "")">@i</button>
                </li>
            }
            <li class="page-item">
                <button class="page-link btn-primary @(Model.Pagination.HasNext ? "" : "disabled")" type="button" onclick="Paging('next')">
                    Next
                </button>
            </li>
        </ul>
    </div>
</div>


@if (Model.EditableEmployee is not null)
{
    
    <!-- Modal -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="modal" aria-hidden="false">
        @{ Employee employee = Model.EditableEmployee;}
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Update employee @employee.Forename @employee.Surname</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <form action="/edit/@employee.Id" method="post" class="modal-body">
                    <input class="form-control" hidden name="@nameof(employee.Id)" value="@employee.Id" />
                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.Payroll)</span>
                        <input class="form-control" type="text" name="@nameof(employee.Payroll)" value="@employee.Payroll" required/>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.Forename)</span>
                        <input class="form-control" type="text" name="@nameof(employee.Forename)" value="@employee.Forename" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.Surname)</span>
                        <input class="form-control" type="text" name="@nameof(employee.Surname)" value="@employee.Surname" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.DateOfBirth)</span>
                        <input class="form-control" type="text" name="@nameof(employee.DateOfBirth)" value="@employee.DateOfBirth" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.Telephone)</span>
                        <input class="form-control" type="tel" name="@nameof(employee.Telephone)" value="@employee.Telephone" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.Mobile)</span>
                        <input class="form-control" type="tel" name="@nameof(employee.Mobile)" value="@employee.Mobile" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.Address)</span>
                        <input class="form-control" type="text" name="@nameof(employee.Address)" value="@employee.Address" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.Address2)</span>
                        <input class="form-control" type="text" name="@nameof(employee.Address2)" value="@employee.Address2" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.PostCode)</span>
                        <input class="form-control" type="text" name="@nameof(employee.PostCode)" value="@employee.PostCode" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.Email)</span>
                        <input class="form-control" type="email" name="@nameof(employee.Email)" value="@employee.Email" required/>
                    </div>

                    <div class="input-group mb-3">
                        <span class="input-group-text w-25">@nameof(employee.StartDate)</span>
                        <input class="form-control" type="text" name="@nameof(employee.StartDate)" value="@employee.StartDate" required/>
                    </div>

                    <div class="modal-footer">
                        <a onclick="window.location = `@(Model.nextUrl ?? "/")`" class="btn btn-secondary" data-bs-dismiss="modal">Close</a>
                        <button type="submit" class="btn btn-primary">Update</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
    new bootstrap.Modal("#EditModal", null)
    .show(document.getElementById("editModal"));
    </script>
}

<script>
let sortingMetadata = @(Json.Serialize(Model.Sorting != null ? Model.Sorting : new SortingMetadata<Employee>()));
let paginationMetaData = @Json.Serialize(Model.Pagination);
</script>
<script src="~/js/formProcess.js">
</script>
